name: CI/CD Pipeline for RESOLVE-FINANCIAL (VM-AZURE-v1)

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

env:
  DOCKER_IMAGE: resourceresolve.azurecr.io/resolve-financial
  APP_PATH: /home/zprouser/resolve-financial
  CONTAINER_NAME: resolve-financial

jobs:
  build-and-deploy:
    runs-on: ubuntu-24.04
    environment: resolve

    steps:
      # 1. Checkout do Código
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Login no Azure Container Registry (ACR)
      - name: Azure Container Registry Login
        uses: azure/docker-login@v2
        with:
          login-server: resourceresolve.azurecr.io
          username: ${{ vars.AZURE_ACR_USERNAME }}
          password: ${{ vars.AZURE_ACR_PASSWORD }}

      # 3. Criar arquivos .env, google_application_credentials.json e combined.pem na pasta ./app
      - name: Create .env and credentials files
        env:
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ vars.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
          COMBINED_PEM: ${{ vars.COMBINED_PEM }}
        run: |
          mkdir -p ./app ./app/certs

          # Criar .env
          cat <<EOF > ./app/.env
CLICKSIGN_API_URL=${{ vars.CLICKSIGN_API_URL }}
CLICKSIGN_ACCESS_TOKEN=${{ vars.CLICKSIGN_ACCESS_TOKEN }}
TEAMS_CLICKSIGN_WEBHOOK_URL=${{ vars.TEAMS_CLICKSIGN_WEBHOOK_URL }}
SECRET_KEY=${{ vars.SECRET_KEY }}
SENTRY_DSN=${{ vars.SENTRY_DSN }}
DEBUG=${{ vars.DEBUG }}
DB_USED=${{ vars.DB_USED }}
DB1_NAME=${{ vars.DB1_NAME }}
DB1_USER=${{ vars.DB1_USER }}
DB1_PASSWORD=${{ vars.DB1_PASSWORD }}
DB1_HOST=${{ vars.DB1_HOST }}
DB1_PORT=${{ vars.DB1_PORT }}
FINANCIAL_RECORD_APPROVAL_URL=${{ vars.FINANCIAL_RECORD_APPROVAL_URL }}
ALLOWED_HOSTS=${{ vars.ALLOWED_HOSTS }}
CSRF_TRUSTED_ORIGINS=${{ vars.CSRF_TRUSTED_ORIGINS }}
CORS_ALLOW_ALL_ORIGINS=${{ vars.CORS_ALLOW_ALL_ORIGINS }}
CORS_ALLOW_CREDENTIALS=${{ vars.CORS_ALLOW_CREDENTIALS }}
CONTENT_TYPE_DOCUMENT=${{ vars.CONTENT_TYPE_DOCUMENT }}
ADMIN_NAME=${{ vars.ADMIN_NAME }}
ADMIN_EMAIL=${{ vars.ADMIN_EMAIL }}
EMAIL_BACKEND=${{ vars.EMAIL_BACKEND }}
EMAIL_HOST=${{ vars.EMAIL_HOST }}
EMAIL_PORT=${{ vars.EMAIL_PORT }}
EMAIL_USE_TLS=${{ vars.EMAIL_USE_TLS }}
EMAIL_HOST_USER=${{ vars.EMAIL_HOST_USER }}
EMAIL_HOST_PASSWORD=${{ vars.EMAIL_HOST_PASSWORD }}
DEFAULT_FROM_EMAIL=${{ vars.DEFAULT_FROM_EMAIL }}
GS_BUCKET_NAME=${{ vars.GS_BUCKET_NAME }}
GS_LOCATION=${{ vars.GS_LOCATION }}
GOOGLE_APPLICATION_CREDENTIALS=google_application_credentials.json
SOLARZ_USERNAME=${{ vars.SOLARZ_USERNAME }}
SOLARZ_PASSWORD=${{ vars.SOLARZ_PASSWORD }}
OMIE_API_URL=${{ vars.OMIE_API_URL }}
OMIE_ACESSKEY=${{ vars.OMIE_ACESSKEY }}
OMIE_ACESSTOKEN=${{ vars.OMIE_ACESSTOKEN }}
CANCEL_FINANCIAL_RECORD_APPROVAL_URL=${{ vars.CANCEL_FINANCIAL_RECORD_APPROVAL_URL }}
GMAPS_API_KEY=${{ vars.GMAPS_API_KEY }}
NEXT_PUBLIC_GOOGLE_MAPS_API_AGENT_ROUTES_KEY=${{ vars.NEXT_PUBLIC_GOOGLE_MAPS_API_AGENT_ROUTES_KEY }}
LOGIN_INFO_WEBHOOK_URL=${{ vars.LOGIN_INFO_WEBHOOK_URL }}
TICKET_INFO_WEBHOOK_URL=${{ vars.TICKET_INFO_WEBHOOK_URL }}
REDIS_HOST=${{ vars.REDIS_HOST }}
REDIS_PORT=${{ vars.REDIS_PORT }}
CELERY_BROKER_URL=${{ vars.CELERY_BROKER_URL }}
EOF

          # google_application_credentials.json
          echo "${GOOGLE_APPLICATION_CREDENTIALS_JSON}" > ./app/google_application_credentials.json

          # combined.pem
          echo "${COMBINED_PEM}" > ./app/certs/combined.pem

      # 4. Build e push da imagem Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./app
          push: true
          tags: resourceresolve.azurecr.io/resolve-financial:${{ github.sha }}

      # 5. Deploy via docker-compose na VM
      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ vars.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo "Deploying resolve-financial API..."
            cd ${{ env.APP_PATH }}
            docker login resourceresolve.azurecr.io -u "${{ vars.AZURE_ACR_USERNAME }}" -p "${{ vars.AZURE_ACR_PASSWORD }}"
            docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            docker-compose down
            docker-compose up -d --build
            echo "✅ Deploy completed successfully"
