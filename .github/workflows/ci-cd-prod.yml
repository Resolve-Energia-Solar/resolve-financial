name: CI/CD Pipeline for RESOLVE-FINANCIAL (VM-AZURE-v2)

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

env:
  DOCKER_IMAGE: resourceresolve.azurecr.io/resolve-financial
  APP_PATH: /home/zprouser/resolve-financial
  CONTAINER_NAME: resolve-financial

jobs:
  build-and-deploy:
    runs-on: ubuntu-24.04
    environment: resolve

    steps:
      # 1. Checkout do Código
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Login no Azure Container Registry (ACR)
      - name: Azure Container Registry Login
        uses: azure/docker-login@v2
        with:
          login-server: resourceresolve.azurecr.io
          username: ${{ vars.AZURE_ACR_USERNAME }}
          password: ${{ vars.AZURE_ACR_PASSWORD }}

      # 3. Criar arquivos .env e google_application_credentials.json
      - name: Create .env and google_application_credentials.json
        env:
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ vars.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
          COMBINED_PEM: ${{ vars.COMBINED_PEM }}
        run: |
          # Criar .env
          echo "CLICKSIGN_API_URL=${{ vars.CLICKSIGN_API_URL}}" >> .env
          echo "CLICKSIGN_ACCESS_TOKEN=${{ vars.CLICKSIGN_ACCESS_TOKEN}}" >> .env
          echo "TEAMS_CLICKSIGN_WEBHOOK_URL=${{ vars.TEAMS_CLICKSIGN_WEBHOOK_URL}}" >> .env
          echo "SECRET_KEY=${{ vars.SECRET_KEY}}" >> .env
          echo "SENTRY_DSN=${{ vars.SENTRY_DSN}}" >> .env
          echo "DEBUG=${{ vars.DEBUG}}" >> .env
          echo "DB_USED=${{ vars.DB_USED }}" >> .env
          echo "DB1_NAME=${{ vars.DB1_NAME }}" >> .env
          echo "DB1_USER=${{ vars.DB1_USER }}" >> .env
          echo "DB1_PASSWORD=${{ vars.DB1_PASSWORD }}" >> .env
          echo "DB1_HOST=${{ vars.DB1_HOST }}" >> .env
          echo "DB1_PORT=${{ vars.DB1_PORT }}" >> .env
          echo "FINANCIAL_RECORD_APPROVAL_URL=${{ vars.FINANCIAL_RECORD_APPROVAL_URL }}" >> .env
          echo "ALLOWED_HOSTS=${{ vars.ALLOWED_HOSTS }}" >> .env
          echo "CSRF_TRUSTED_ORIGINS=${{ vars.CSRF_TRUSTED_ORIGINS }}" >> .env
          echo "CORS_ALLOW_ALL_ORIGINS=${{ vars.CORS_ALLOW_ALL_ORIGINS }}" >> .env
          echo "CORS_ALLOW_CREDENTIALS=${{ vars.CORS_ALLOW_CREDENTIALS }}" >> .env
          echo "CONTENT_TYPE_DOCUMENT=${{ vars.CONTENT_TYPE_DOCUMENT }}" >> .env
          echo "ADMIN_NAME=${{ vars.ADMIN_NAME }}" >> .env
          echo "ADMIN_EMAIL=${{ vars.ADMIN_EMAIL }}" >> .env
          echo "EMAIL_BACKEND=${{ vars.EMAIL_BACKEND }}" >> .env
          echo "EMAIL_HOST=${{ vars.EMAIL_HOST }}" >> .env
          echo "EMAIL_PORT=${{ vars.EMAIL_PORT }}" >> .env
          echo "EMAIL_USE_TLS=${{ vars.EMAIL_USE_TLS }}" >> .env
          echo "EMAIL_HOST_USER=${{ vars.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ vars.EMAIL_HOST_PASSWORD }}" >> .env
          echo "DEFAULT_FROM_EMAIL=${{ vars.DEFAULT_FROM_EMAIL }}" >> .env
          echo "GS_BUCKET_NAME=${{ vars.GS_BUCKET_NAME }}" >> .env
          echo "GS_LOCATION=${{ vars.GS_LOCATION }}" >> .env
          echo "GOOGLE_APPLICATION_CREDENTIALS=google_application_credentials.json" >> .env
          echo "SOLARZ_USERNAME=${{ vars.SOLARZ_USERNAME }}" >> .env
          echo "SOLARZ_PASSWORD=${{ vars.SOLARZ_PASSWORD }}" >> .env
          echo "OMIE_API_URL=${{ vars.OMIE_API_URL }}" >> .env
          echo "OMIE_ACESSKEY=${{ vars.OMIE_ACESSKEY }}" >> .env
          echo "OMIE_ACESSTOKEN=${{ vars.OMIE_ACESSTOKEN }}" >> .env
          echo "CANCEL_FINANCIAL_RECORD_APPROVAL_URL=${{ vars.CANCEL_FINANCIAL_RECORD_APPROVAL_URL}}" >> .env
          echo "GMAPS_API_KEY=${{ vars.GMAPS_API_KEY }}" >> .env
          echo "NEXT_PUBLIC_GOOGLE_MAPS_API_AGENT_ROUTES_KEY=${{ vars.NEXT_PUBLIC_GOOGLE_MAPS_API_AGENT_ROUTES_KEY}}" >> .env
          echo "LOGIN_INFO_WEBHOOK_URL=${{ vars.LOGIN_INFO_WEBHOOK_URL }}" >> .env
          echo "TICKET_INFO_WEBHOOK_URL=${{ vars.TICKET_INFO_WEBHOOK_URL }}" >> .env
          echo "REDIS_HOST=${{ vars.REDIS_HOST}}" >> .env
          echo "REDIS_PORT=${{ vars.REDIS_PORT}}" >> .env
          echo "CELERY_BROKER_URL=${{ vars.CELERY_BROKER_URL}}" >> .env
          # google_application_credentials.json
          echo "${GOOGLE_APPLICATION_CREDENTIALS_JSON}" > google_application_credentials.json
          # combined.pem
          mkdir -p certs
          echo "${COMBINED_PEM}" > certs/combined.pem

      # 4. Build e Push da Imagem Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          build-args: |
            ENV_FILE=.env

      # 5. Deploy na VM via SSH
      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ vars.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo "Deploying resolve-financial..."
            docker login resourceresolve.azurecr.io -u "${{ vars.AZURE_ACR_USERNAME }}" -p "${{ vars.AZURE_ACR_PASSWORD }}"
            docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
            docker run -d --restart=always --name ${{ env.CONTAINER_NAME }} \
              -p 3001:3000 \
              ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            echo "✅ Deploy completed successfully"      