name: CI/CD Pipeline for RESOLVE-ERP-API

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: resourceresolve.azurecr.io/resolve-erp-api
  AKS_CLUSTER_NAME: Resolve-AKS-Web
  AKS_RESOURCE_GROUP: Resolve
  NAMESPACE: resolve-erp
  DEPLOYMENT_NAME: resolve-erp-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-20.04
    environment: resolve

    steps:

    # 1. Checkout do Código
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Log in ao Azure Container Registry
    - name: Log in to Azure Container Registry (ACR)
      run: echo "${{ vars.AZURE_ACR_PASSWORD }}" | docker login resourceresolve.azurecr.io -u "${{ vars.AZURE_ACR_USERNAME }}" --password-stdin

    # 3. Build e Push da Imagem Docker
    - name: Build and Push Docker Image
      run: |
        docker build -t "${DOCKER_IMAGE}:${{ github.sha }}" .
        docker push "${DOCKER_IMAGE}:${{ github.sha }}"

    # 4. Log in ao Azure CLI
    - name: Log in to Azure
      run: az login --service-principal -u "${{ vars.AZURE_CLIENT_ID }}" -p "${{ vars.AZURE_CLIENT_SECRET }}" --tenant "${{ vars.AZURE_TENANT_ID }}"

    # 5. Configurar Acesso ao Cluster AKS
    - name: Configure Access to AKS
      run: az aks get-credentials --resource-group "$AKS_RESOURCE_GROUP" --name "$AKS_CLUSTER_NAME" --overwrite-existing

    # 6. Criar a variavel do google no AKS  
    - name: Create or update Kubernetes Secret
      env:
        GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ vars.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
      run: |
        echo "${GOOGLE_APPLICATION_CREDENTIALS_JSON}" > google_application_credentials.json
        kubectl create secret generic google-application-credentials --from-file=google_application_credentials.json -n $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

    # 7. Deploy da Aplicação no AKS
    - name: Update Deployment on AKS
      run: |
          kubectl set image deployment/$DEPLOYMENT_NAME resolve-erp-api="${DOCKER_IMAGE}:${{ github.sha }}" -n "$NAMESPACE"
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n "$NAMESPACE"

    # 8. Debug Deployment (Opcional)
    - name: Debug Deployment Logs
      run: |
          kubectl get pods -n "$NAMESPACE"
          kubectl logs deployment/$DEPLOYMENT_NAME -n "$NAMESPACE"
