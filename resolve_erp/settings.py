"""
Django settings for resolve_erp project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()
from .jazzmin import JAZZMIN_SETTINGS
from .jazzmin import JAZZMIN_UI_TWEAKS

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (os.environ.get('DEBUG') == 'True')

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS').split(',') if os.environ.get('ALLOWED_HOSTS') else []
CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS').split(',') if os.environ.get('CSRF_TRUSTED_ORIGINS') else []

if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 3156000
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True


# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts.apps.AccountsConfig',
    'core.apps.CoreConfig',
    'resolve_crm.apps.ResolveCRMConfig',
    'contracts.apps.ContractsConfig',
    'logistics.apps.LogisticsConfig',
    'inspections.apps.InspectionsConfig',
    'engineering.apps.EngineeringConfig',
    'financial.apps.FinancialConfig',
    'notifications',
    'widget_tweaks',
    'django_select2',
    'crispy_forms',
    'crispy_bootstrap5',
    'simple_history',
    'api.apps.ApiConfig',
    'rest_framework',
    'drf_yasg',
    'corsheaders'
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

DJANGO_NOTIFICATIONS_CONFIG = {'SOFT_DELETE': True}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

# CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS').split(',') if os.environ.get('CORS_ALLOWED_ORIGINS') else []
CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = 'resolve_erp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'resolve_erp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'sqlite': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
    'mysql': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get("DB1_NAME"),
        'USER': os.environ.get("DB1_USER"),
        'PASSWORD': os.environ.get("DB1_PASSWORD"),
        'HOST': os.environ.get("DB1_HOST"),
        'PORT': os.environ.get("DB1_PORT"),
    },
    'mysql_old': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get("DB2_NAME"),
        'USER': os.environ.get("DB2_USER"),
        'PASSWORD': os.environ.get("DB2_PASSWORD"),
        'HOST': os.environ.get("DB2_HOST"),
        'PORT': os.environ.get("DB2_PORT"),
    }
}

# choose the database to use
DATABASES['default'] = DATABASES[os.environ.get('DB_USED')]

DATABASE_ROUTERS = ['financial.db_routers.MySQLRouter']


# User model
AUTH_USER_MODEL = "accounts.User"

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',   
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH'
    'DELETE',
    'OPTIONS',
]

CORS_ALLOW_HEADERS = [
    'content-type',
    'authorization',
]


SIMPLE_JWT = {
    # Definindo a expiração do token de acesso para uma hora
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    # Tempo de vida do token de atualização
    "REFRESH_TOKEN_LIFETIME": timedelta(days=15),
}

# Caches

CACHES = {
    "default": {"BACKEND": "django.core.cache.backends.locmem.LocMemCache"},
    "select2": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://redis:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}


# Tell select2 which cache configuration to use:
SELECT2_CACHE_BACKEND = "select2"


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Belem'

USE_I18N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Configuração de envio de e-mail
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')


# Admins
ADMINS = [
    (os.getenv('ADMIN_NAME'), os.getenv('ADMIN_EMAIL')),
]

# Configuração do Logging
if DEBUG == False:

    import logging
    import logging.handlers
    
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {
                "format": "-"*60 + "\n{levelname} {asctime} {module} {process:d} {thread:d} {message}",
                "style": "{",
            },
        },
        "filters": {
            "debug_filter": {
                "()": "django.utils.log.CallbackFilter",
                "callback": lambda record: record.levelno == logging.DEBUG,
            },
            "info_filter": {
                "()": "django.utils.log.CallbackFilter",
                "callback": lambda record: record.levelno == logging.INFO,
            },
            "warning_filter": {
                "()": "django.utils.log.CallbackFilter",
                "callback": lambda record: record.levelno == logging.WARNING,
            },
            "error_filter": {
                "()": "django.utils.log.CallbackFilter",
                "callback": lambda record: record.levelno == logging.ERROR,
            },
            "critical_filter": {
                "()": "django.utils.log.CallbackFilter",
                "callback": lambda record: record.levelno == logging.CRITICAL,
            },
        },
        "handlers": {
            "mail_admins": {
                "level": "ERROR",
                "class": "django.utils.log.AdminEmailHandler",
                "include_html": True,
                "formatter": "verbose",
            },
            "debug_file": {
                "level": "DEBUG",
                "class": "logging.handlers.RotatingFileHandler",
                "filename": "logs/debug.log",
                "formatter": "verbose",
                "maxBytes": 50 * 1024 * 1024,
                "backupCount": 10,
                "filters": ["debug_filter"],
            },
            "info_file": {
                "level": "INFO",
                "class": "logging.handlers.RotatingFileHandler",
                "filename": "logs/info.log",
                "formatter": "verbose",
                "maxBytes": 50 * 1024 * 1024,
                "backupCount": 10,
                "filters": ["info_filter"],
            },
            "warning_file": {
                "level": "WARNING",
                "class": "logging.handlers.RotatingFileHandler",
                "filename": "logs/warning.log",
                "formatter": "verbose",
                "maxBytes": 50 * 1024 * 1024,
                "backupCount": 10,
                "filters": ["warning_filter"],
            },
            "error_file": {
                "level": "ERROR",
                "class": "logging.handlers.RotatingFileHandler",
                "filename": "logs/error.log",
                "formatter": "verbose",
                "maxBytes": 50 * 1024 * 1024,
                "backupCount": 10,
                "filters": ["error_filter"],
            },
            "critical_file": {
                "level": "CRITICAL",
                "class": "logging.handlers.RotatingFileHandler",
                "filename": "logs/critical.log",
                "formatter": "verbose",
                "maxBytes": 50 * 1024 * 1024,
                "backupCount": 10,
                "filters": ["critical_filter"],
            },
        },
        "loggers": {
            "django": {
                "handlers": ["mail_admins"],
                "level": "ERROR",
                "propagate": True,
            },
            "": {
                "handlers": ["debug_file", "info_file", "warning_file", "error_file", "critical_file"],
                "level": "DEBUG",
                "propagate": True,
            },
        },
    }

    LOGGING["handlers"]["debug_file"]["filters"] = ["debug_filter"]
    LOGGING["handlers"]["info_file"]["filters"] = ["info_filter"]
    LOGGING["handlers"]["warning_file"]["filters"] = ["warning_filter"]
    LOGGING["handlers"]["error_file"]["filters"] = ["error_filter"]
    LOGGING["handlers"]["critical_file"]["filters"] = ["critical_filter"]


JAZZMIN_SETTINGS = JAZZMIN_SETTINGS
# JAZZMIN_SETTINGS["show_ui_builder"] = True